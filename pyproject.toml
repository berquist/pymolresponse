[project]
name = "pyresponse"
description = "Molecular frequency-dependent response properties for arbitrary operators"
dynamic = ["version"]
readme = "README.md"
authors = [
    { name = "Eric Berquist", email = "eric.berquist@gmail.com" }
]
license = {file = "LICENSE"}
classifiers = [
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
]
requires-python = ">=3.6"
dependencies = [
    "attrs",
    "cclib",
    "periodictable",
]

[project.urls]
"Bug Tracker" = "https://github.com/berquist/pyresponse/issues"
Documentation = "https://berquist.github.io/pyresponse_docs/"
Homepage = "https://github.com/berquist/pyresponse"

[project.optional-dependencies]
test = [
  "pytest>=6.1.2",
  "pytest-runner"
]

[build-system]
requires = ["setuptools>=61.0", "versioningit~=2.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
zip-safe = false
# include-package-data = false

# [tool.setuptools.packages.find]
# namespaces = false
# where = ["."]

# [tool.setuptools.package-data]
# pyresponse2 = [
#     "py.typed"
# ]

[tool.setuptools.package-dir]
pyresponse = "pyresponse"

[tool.doc8]
ignore = "D001"

[tool.isort]
profile = "black"
line_length = 100
# default is FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER
sections = ["FUTURE", "STDLIB", "ATTRS", "THIRDPARTY", "CHEMISTRY", "FIRSTPARTY", "LOCALFOLDER"]
known_attrs = ["attr"]
known_chemistry = ["psi4", "pyscf"]

[tool.mypy]
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true

scripts_are_modules = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = [
    "psi4",
    "pyscf",
    "pytest",
    "scipy",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 100

[tool.ruff.format]
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = []

[tool.ruff.lint.isort]
lines-after-imports = 2
section-order = ["future", "standard-library", "attrs", "third-party", "chemistry", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
"attrs" = ["attr"]
"chemistry" = ["psi4", "pyscf"]

[tool.versioningit.format]
distance = "{base_version}+{distance}.{vcs}{rev}"
dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"
distance-dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"

[tool.versioningit.vcs]
method = "git"
match = ["v*"]

[tool.versioningit.write]
file = "pyresponse/_version.py"
